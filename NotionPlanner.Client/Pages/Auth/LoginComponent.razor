@page "/auth/login"

@using System.Security.Claims
@using NotionPlanner.Shared.Models.Auth
@using NotionPlanner.Client.Models

@layout AuthLayout

@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authenticationStateProvider;

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}
<div class="row">
    <div class="col-12">
        <h2>Login</h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>Email</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password</label>
                <RadzenPassword Placeholder="Enter password..." @bind-Value="model.Password"></RadzenPassword>

                <hr />

                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block ck mr-2"
                              Disabled="isLoading" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                              Disabled="isLoading" Click="GotoRegisterPage" />
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new LoginRequest();
    bool isLoading = false;
    private bool ShowErrors;
    private string Error = "";
    public async Task LoginUser()
    {
        ShowErrors = false;
        isLoading = true;
        var result = await authService.LoginUserAsync(model);
        if (result.Successful)
        {
            var userInfo = new LocalUserInfo()
            {
                AccessToken = result.Token,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[ClaimTypes.NameIdentifier]
            };

            await storageService.SetItemAsync("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo("/");
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }
        isLoading = false;
    }

    void GotoRegisterPage()
    {
        navigationManager.NavigateTo("auth/register");
    }
}

