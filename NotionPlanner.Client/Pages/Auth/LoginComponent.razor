@page "/auth/login"

@using NotionPlanner.Shared.Models.Auth
@using NotionPlanner.Client.Models
@layout AuthLayout

@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authenticationStateProvider;

<div class="row">
    <div class="col-12">
        <h2>Login</h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>               
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>Email</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password</label>
                <RadzenTextBox @bind-Value="model.Password"></RadzenTextBox>

                <hr />

                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block ck mr-2"
                              Disabled="isLoading" />                             
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2" 
                              Disabled="isLoading" Click="GotoRegisterPage"/>
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new LoginRequest();
    bool isLoading = false;
    string message = string.Empty;
    public async Task LoginUser()
    {
        isLoading = true;
        var result = await authService.LoginUserAsync(model);
        if (result.IsSuccess)
        {
            var userInfo = new LocalUserInfoStorage()
            {
                FirstName = result.FirstName,
                LastName = result.LastName,
                AccessToken = result.Token,
                Email = result.Email,
                Id = result.Id
            };

            await storageService.SetItemAsync("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
        else
        {
            message = "Error";
        }
        isLoading = false;
    }

    void GotoRegisterPage()
    {
        navigationManager.NavigateTo("auth/register");
    }
}

