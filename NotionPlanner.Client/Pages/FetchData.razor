@page "/fetchdata"
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using NotionPlanner.Shared.Services
@using NotionPlanner.Shared.Common.Request

@inject HttpClient Http
@inject AdminService adminService

<h1>SignalR Admin Dashboard</h1>
<button class="btn btn-success" @onclick="async () => await ConnectToServer()" disabled="@isConnected">Start Application</button>

<h3>Connection Status: @connectionStatus</h3>

<div class="row">
    <div class="col-12">
        <table class="table">
            <thead>
                <tr>
                    <th>MethodType</th>
                    <th>Path</th>
                    <th>StatusCode</th>
                    <th>RequestPayload</th>
                    <th>CreatedBy</th>
                    <th>CreatedAtUTC</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _notifications)
                {
                    <tr>
                        <td>@item.MethodType</td>
                        <td>@item.Path</td>
                        <td>@item.StatusCode</td>
                        <td>@item.QueryParameter</td>
                        <td>@item.RequestPayload</td>
                        <td>@item.CreatedBy</td>
                        <td>@item.CreatedAtUTC</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {

    string url = "http://localhost:5000/notificationhub";

    HubConnection _connection = null;
    bool isConnected = false;
    string connectionStatus = "Closed";

    readonly List<RequestStreamResponse> _notifications = new List<RequestStreamResponse>();

    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder().WithUrl(url).Build();

        await _connection.StartAsync();
        isConnected = true;
        connectionStatus = "Monitoring Start !!";

        _connection.Closed += async (s) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected !";
            await _connection.StartAsync();
            isConnected = true;
        };

        _connection.On<string>("notification", m =>
        {
            var stream = JsonConvert.DeserializeObject<RequestStreamResponse>(m);
            _notifications.Add(stream);
            StateHasChanged();
        });
    }
}