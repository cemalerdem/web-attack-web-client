@page "/monitoring"
@using System.Globalization
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using NotionPlanner.Shared.Services
@using NotionPlanner.Shared.Common.Request

@inject HttpClient Http
@inject AdminService adminService

<h1>SignalR Admin Dashboard</h1>
<button class="btn btn-success" @onclick="async () => await ConnectToServer()" disabled="@isConnected">Start Application</button>

<h3>Connection Status: @connectionStatus</h3>
<div class="row">
    <div class="col-md-6">
        <div class="col-md-6 col-sm-12 p-4">
            <RadzenChart>
                <RadzenPieSeries Data="@revenues" CategoryProperty="Quarter" ValueProperty="Revenue">
                    <TooltipTemplate>
                        <div class="rz-donut-content">
                            <div>Revenue</div>
                            <div>for 2020</div>
                        </div>
                    </TooltipTemplate>
                </RadzenPieSeries>
            </RadzenChart>
        </div>
    </div>
    <div class="col-md-6">
        <div class="col-sm-12">
            <label>Smooth <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox></label>
            <RadzenChart>
                <RadzenLineSeries Smooth="@smooth" Data="@revenue2019" CategoryProperty="Date" Title="2019" LineType="LineType.Dashed" ValueProperty="Revenue">
                    <RadzenMarkers MarkerType="MarkerType.Square" />
                </RadzenLineSeries>
                <RadzenLineSeries Smooth="@smooth" Data="@revenue2020" CategoryProperty="Date" Title="2020" ValueProperty="Revenue">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Revenue in USD" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
</div>
<RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            AllowSorting="true" Data="@notifications" TItem="RequestStream" ColumnWidth="200px">
    <Columns>
        <RadzenGridColumn TItem="RequestStream" Property="timestamp" Title="Occurred Time" />
        <RadzenGridColumn TItem="RequestStream" Property="method" Title="Method" />
        <RadzenGridColumn TItem="RequestStream" Property="path" Title="Path" />
        <RadzenGridColumn TItem="RequestStream" Property="statusCode" Title="Status" />
        <RadzenGridColumn TItem="RequestStream" Property="query" Title="Query Parameter" />
        <RadzenGridColumn TItem="RequestStream" Property="requestPayload" Title="Request Payload"/>
        <RadzenGridColumn TItem="RequestStream" Property="result" Title="Result" >
        <Template>
            <RadzenIcon Icon="bug-report" />
        </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>

@code {

    string url = "http://localhost:5000/notificationhub";

    HubConnection _connection = null;
    bool isConnected = false;
    string connectionStatus = "Closed";
    string icon = "";

    readonly List<RequestStream> notifications = new List<RequestStream>();

    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder().WithUrl(url).Build();

        await _connection.StartAsync();
        isConnected = true;
        connectionStatus = "Monitoring Start !!";

        _connection.Closed += async (s) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected !";
            await _connection.StartAsync();
            isConnected = true;
        };

        _connection.On<string>("notification", m =>
        {
            var stream = JsonConvert.DeserializeObject<RequestStream>(m);
            notifications.Add(stream);
            StateHasChanged();
        });
    }
    class DataItemm
    {
        public string Quarter { get; set; }
        public double Revenue { get; set; }
    }

    DataItemm[] revenues = new DataItemm[] {
        new DataItemm
        {
            Quarter = "Q1",
            Revenue = 30000
        },
        new DataItemm
        {
            Quarter = "Q2",
            Revenue = 40000
        },
        new DataItemm
        {
            Quarter = "Q3",
            Revenue = 50000
        },
        new DataItemm
        {
            Quarter = "Q4",
            Revenue = 80000
        },
    };
    bool smooth = false;
    class DataItem
    {
        public DateTime Date { get; set; }
        public double Revenue { get; set; }
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }

    DataItem[] revenue2019 = new DataItem[] {
        new DataItem
        {
            Date = DateTime.Parse("2019-01-01"),
            Revenue = 234000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-02-01"),
            Revenue = 269000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-03-01"),
            Revenue = 233000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-04-01"),
            Revenue = 244000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-05-01"),
            Revenue = 214000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-06-01"),
            Revenue = 253000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-07-01"),
            Revenue = 274000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-08-01"),
            Revenue = 284000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-09-01"),
            Revenue = 273000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-10-01"),
            Revenue = 282000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-11-01"),
            Revenue = 289000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-12-01"),
            Revenue = 294000
        }
    };

    DataItem[] revenue2020 = new DataItem[] {
        new DataItem
        {
            Date = DateTime.Parse("2019-01-01"),
            Revenue = 334000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-02-01"),
            Revenue = 369000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-03-01"),
            Revenue = 333000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-04-01"),
            Revenue = 344000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-05-01"),
            Revenue = 314000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-06-01"),
            Revenue = 353000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-07-01"),
            Revenue = 374000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-08-01"),
            Revenue = 384000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-09-01"),
            Revenue = 373000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-10-01"),
            Revenue = 382000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-11-01"),
            Revenue = 389000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-12-01"),
            Revenue = 394000
        }
    };
}