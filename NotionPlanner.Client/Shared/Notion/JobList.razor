@using NotionPlanner.Shared.Common
@using NotionPlanner.Shared.Models.Notion


<h3>@ListStatus (@Jobs.Count()</h3>


<ul class="dropzone @dropClass"
    ondragover="event.preventDefault();"
    ondragstart="event.dataTransfer.setData('', event.target.id);"
    @ondrop="HandleDrop"
    @ondragenter="HandleDragEnter"
    @ondragleave="HandleDragLeave">
    
    @foreach (var job in Jobs)
    {
        <Job JobModel="job" />
    }

</ul>


@code {
    [CascadingParameter] JobsContainer Container { get; set; }
    [Parameter] public NotionPlanner.Shared.Common.JobStatus ListStatus { get; set; }
    [Parameter] public JobStatus[] AllowedStatus { get; set; }

    List<JobModel> Jobs = new List<JobModel>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
        Jobs.Clear();
        Jobs.AddRange(Container.Jobs.Where(x => x.Status == ListStatus));
    }

    private void HandleDragEnter()
    {
        if (ListStatus == Container.Payload.Status) return;

        dropClass = AllowedStatus != null && !AllowedStatus.Contains(Container.Payload.Status) ? "no-drop" : "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
        if (AllowedStatus != null && !AllowedStatus.Contains(Container.Payload.Status)) return;

        await Container.UpdateJobAsync(ListStatus);
    }
}
